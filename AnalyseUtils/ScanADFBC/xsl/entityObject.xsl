<?xml version="1.0" encoding="UTF-8" ?>
<xsl:stylesheet version="1.0" xmlns:ns0="http://xmlns.oracle.com/bc4j"
                xmlns:oracle-xsl-mapper="http://www.oracle.com/xsl/mapper/schemas"
                xmlns:oraxsl="http://www.oracle.com/XSL/Transform/java"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                exclude-result-prefixes="oracle-xsl-mapper xsi xsd xsl ns0 oraxsl">
  <oracle-xsl-mapper:schema>
    <!--SPECIFICATION OF MAP SOURCES AND TARGETS, DO NOT MODIFY.-->
    <oracle-xsl-mapper:mapSources>
      <oracle-xsl-mapper:source type="XSD">
        <oracle-xsl-mapper:schema location="../xsd/entityObject.xsd"/>
        <oracle-xsl-mapper:rootElement name="Entity" namespace="http://xmlns.oracle.com/bc4j"/>
      </oracle-xsl-mapper:source>
    </oracle-xsl-mapper:mapSources>
    <oracle-xsl-mapper:mapTargets>
      <oracle-xsl-mapper:target type="XSD">
        <oracle-xsl-mapper:schema location="../xsd/entityObjectProps.xsd"/>
        <oracle-xsl-mapper:rootElement name="Entity" namespace="http://xmlns.oracle.com/bc4j"/>
      </oracle-xsl-mapper:target>
    </oracle-xsl-mapper:mapTargets>
    <!--GENERATED BY ORACLE XSL MAPPER 12.2.1.4.0(XSLT Build 190828.0353.3300) AT [TUE JUN 27 17:35:37 CEST 2023].-->
  </oracle-xsl-mapper:schema>
  <!--User Editing allowed BELOW this line - DO NOT DELETE THIS LINE-->
  <xsl:template match="/">
    <entity name="{/ns0:Entity/@Name}" version="{/ns0:Entity/@Version}">
      <xsl:if test="/ns0:Entity/@DBObjectType">
        <xsl:attribute name="DBObjectType">
          <xsl:value-of select="/ns0:Entity/@DBObjectType"/>
        </xsl:attribute>
      </xsl:if>
      <xsl:if test="/ns0:Entity/@DBObjectName">
        <xsl:attribute name="DBObjectName">
          <xsl:value-of select="/ns0:Entity/@DBObjectName"/>
        </xsl:attribute>
      </xsl:if>
      <xsl:if test="/ns0:Entity/@AliasName">
        <xsl:attribute name="AliasName">
          <xsl:value-of select="/ns0:Entity/@AliasName"/>
        </xsl:attribute>
      </xsl:if>
      <xsl:if test="/ns0:Entity/@BindingStyle">
        <xsl:attribute name="BindingStyle">
          <xsl:value-of select="/ns0:Entity/@BindingStyle"/>
        </xsl:attribute>
      </xsl:if>
      <xsl:if test="/ns0:Entity/@RowClass">
        <xsl:attribute name="RowClass">
          <xsl:value-of select="/ns0:Entity/@RowClass"/>
        </xsl:attribute>
      </xsl:if>
      <xsl:if test="/ns0:Entity/@InheritPersonalization">
        <xsl:attribute name="InheritPersonalization">
          <xsl:value-of select="/ns0:Entity/@InheritPersonalization"/>
        </xsl:attribute>
      </xsl:if>
      <tableList>
        <xsl:call-template name="loopAttributesForTables">
          <xsl:with-param name="entity" select="/ns0:Entity"/>
        </xsl:call-template>
      </tableList>
      <columnList>
        <xsl:call-template name="loopAttributesForColumns">
          <xsl:with-param name="entity" select="/ns0:Entity"/>
        </xsl:call-template>
      </columnList>
    </entity>
  </xsl:template>
  <xsl:template name="loopAttributesForTables">
    <xsl:param name="entity"/>
    <xsl:param name="index" select="1"/>
    <xsl:param name="partialList" select="''"/>
    <xsl:choose>
      <xsl:when test="number($index)=1">
        <xsl:call-template name="loopAttributesForTables">
          <xsl:with-param name="entity" select="$entity"/>
          <xsl:with-param name="index" select="$index+1"/>
          <xsl:with-param name="partialList" select="$entity/ns0:Attribute[1]/@TableName"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:when test="number($index)> 1 and number($index)&lt;=count($entity/ns0:Attribute)">
        <xsl:choose>
          <xsl:when test="not(contains($partialList, $entity/ns0:Attribute[number($index)]/@TableName))">
            <xsl:call-template name="loopAttributesForTables">
              <xsl:with-param name="entity" select="$entity"/>
              <xsl:with-param name="index" select="$index+1"/>
              <xsl:with-param name="partialList"
                              select="concat($partialList,',',$entity/ns0:Attribute[number($index)]/@TableName)"/>
            </xsl:call-template>
          </xsl:when>
          <xsl:otherwise>
            <xsl:call-template name="loopAttributesForTables">
              <xsl:with-param name="entity" select="$entity"/>
              <xsl:with-param name="index" select="$index+1"/>
              <xsl:with-param name="partialList" select="$partialList"/>
            </xsl:call-template>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$partialList"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  <xsl:template name="loopAttributesForColumns">
    <xsl:param name="entity"/>
    <xsl:param name="index" select="1"/>
    <xsl:param name="partialList" select="''"/>
    <xsl:choose>
      <xsl:when test="number($index)=1">
        <xsl:call-template name="loopAttributesForColumns">
          <xsl:with-param name="entity" select="$entity"/>
          <xsl:with-param name="index" select="$index+1"/>
          <xsl:with-param name="partialList" select="concat($entity/ns0:Attribute[1]/@TableName,'.', $entity/ns0:Attribute[1]/@ColumnName)"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:when test="number($index)> 1 and number($index)&lt;=count($entity/ns0:Attribute)">
            <xsl:call-template name="loopAttributesForColumns">
              <xsl:with-param name="entity" select="$entity"/>
              <xsl:with-param name="index" select="$index+1"/>
              <xsl:with-param name="partialList"
                              select="concat($partialList,',',concat($entity/ns0:Attribute[number($index)]/@TableName,'.', $entity/ns0:Attribute[$index]/@ColumnName))"/>
            </xsl:call-template>         
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$partialList"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
</xsl:stylesheet>
